// ToooR
// t...
// В мережі

// DemoAslan — 22.11.2023 13:42
// Тут будуть дз задачі
// DemoAslan — 22.11.2023 19:23
// Задачі до виконання @Учень 

// Задача
// Діти п'ють гарячий солодкий напій, який називається "toddy".
// Підлітки п'ють газований напій з назвою "coke".
// Молоді дорослі п'ють пиво, але вже без бадьорого ефекту.
// Дорослі п'ють високоякісний алкогольний напій, який називається "whisky".

// Залежно від віку людини необхідно виводити напій, який пʼє ваш користувач.

// Правила:
// Діти молодші за 14 років.
// Підлітки молодші за 18 років.
// Молоді дорослі молодші за 21 рік.
// Дорослі від 21 року і старші.

// Приклади: (Вхід --> Вихід)
// 13 --> "П'ють toddy"
// 17 --> "П'ють coke"
// 18 --> "П'ють beer"
// 20 --> "П'ють beer"
// 30 --> "П'ють whisky"

// Створіть змінну, яка містить число. Наприклад: let number = 10.
// Використовуючи тернарний оператор,перевірити, чи є число парним або непарним.
// Виведіть в консоль повідомлення, що показує результат.

// Task
// Guess what will return these expressions
// let a = "Hello" && "World"; // ?
// let b = 0 || "Fallback"; // ?
// let c = false || 42; // ?
// let d = (true && 5) || 0; // ?
// let e = 10 && false && "Hello"; // ?
// let f = "JS" || (0 && true); // ?
// let g = false || null  || "Value"; // ?
// let h = undefined || (0 && "Success"); // ?
// let i = "" || 0 || false || "Result"; // ?
// let j = (true && 0) || "Hello" || false; // ?
 
// DemoAslan — 25.11.2023 16:48
// @Учень 
// hw 2 part 2

// Задача
// Створіть декілька об'єктів, які є у вас вдома (телефон, телевізор, ноутбук і т. д.).
// Додайте їх до масиву myHome.
// Потім, використовуючи методи push, shift, unshift та pop,
// додайте або видаліть елементи з масиву.

// ---

// task
// Create object with 3 nesting levels. Object should include number,string, array and other objects. Some of the fields could be optional(log them, at least 2 keys)
// Create a full copy of object
// Destructure properties from 1,2 and 3 level of nesting(rename one of this properties)
// Use .keys() to get keys of object from 2 nesting level, .values() to get values from 1 level.
// Concat the deepest object with such object{ harry:'Potter', ["voldemort bitch"]:true }
// Check if your object has property 'blablacar' using at least 2 methods

// --- 

// Задача
// Створіть масив, який містить кілька різних назв фруктів.
// Наприклад: ["яблуко", "банан", "апельсин"]. Потім виконайте такі дії:

// Додайте новий фрукт в кінець масиву.
// Видаліть перший фрукт з масиву.
// Змініть третій фрукт на "груша".
// Виведіть остаточний масив фруктів в консоль.
// Using destructuring get first element and rest of fruits
 
// DemoAslan — 29.11.2023 22:17
// Create an array and use the spread operator to create a copy of that array. Modify the copied array and ensure that the original array remains unchanged.
// Create an object and use the spread operator to create a copy of that object. Add or modify a property in the copied object and make sure the original object is not affected.
// Given two arrays, use the spread operator to merge them into a single array.
// Given a string, use the spread operator to convert it into an array of characters.
// Given an array and an additional item, use the spread operator to add the item to the beginning or end of the array.
// Create multiple objects and use the spread operator to combine them into a single object.

// Вивести на консоль числа від 1 до 10, використовуючи цикл for.
// __



// Створити об'єкт, який містить різні книжки та їх авторів.
// Наприклад: { "Хоббіт": "Дж. Р. Р. Толкін", "Гра Престолів": "Джордж Мартін", "Гаррі Поттер": "Дж. К. Роулінг" }.
// Вивести на консоль всі назви книжок, використовуючи цикл for...in.

// __

// Вивести на консоль парні числа від 0 до 20, використовуючи цикл for. Задайте крок циклу так, щоб кожне наступне число було збільшене на 2.
// __

// Створити функцію яка приймає масив будь яких объектів, та повертає масив ключів всіх обєктів
// EXAMPLE:
// [{name: 'Dima', age: 13}, {model: 'Camry'}]  ===> [ name, age, model ]

// __

// Написати код який бере масив будь яких объектів, та повертає масив значень всіх обєктів
// EXAMPLE:
// [{name: 'Dima', age: 13}, {model: 'Camry'}]  ===> [ Dima, 13, Camry ]

// __
// Написати код який скаладає значення елементів з однаковими індексами  та повертає новий результуючий масив.
//   EXAMPLE:
//   [1,2,3,4]
//   [2,3,4,5]
//   результат
//   [3,5,7,9]
// DemoAslan — 06.12.2023 22:55
// Add Two Numbers
// Write a function called add that takes two numbers as parameters and returns their sum.

//  Find the Maximum Number
// Write a function called findMax that takes an array of numbers and returns the largest number in the array.

// Check for Palindrome
// Write a function called isPalindrome that checks if a given string is a palindrome (reads the same backward as forward).

// String Repeater
// Write a function named repeatString that takes a string and a number and returns the string repeated that many times.

// Ваша функція має приймати одне натуральне число, після чого вивести:

// "Fizz", якщо це число ділиться на 3;
// "Buzz", якщо це число ділиться на 5;
// “FizzBuzz”, якщо виконані обидві попередні умови;
// саме це число в інших випадках

// EXAMPLE:
// Input: 15
// Output: FizzBuzz

// Input: 10
// Output: Buzz



// Напишіть функцію для побудови горизонтальних стовпчастих діаграм за допомогою символу зірочки.
// Вводити потрібно масив з цілими данними

// EXAMPLE:
// Input: [3,7,1,10,8]

// Вивід: на картинці
// Зображення
// DemoAslan — 09.12.2023 16:48
// Задачі
// task1
// I have array where elements is number or array of numbers or array of numbers or array etc
// U need to calculate sum of all numbers. For example:

// const nestedArray = [1, [2, 3, [4, 5]], [6, 7], 8];
// const totalSum = recursiveArraySum(nestedArray);
// Розгорнути
// message.txt
// 3 КБ
// DemoAslan — 08.02.2024 22:22
// Маючи отакий код 

// const width = 500;
// const auto = {
//   brand: 'Tesla',
//   color: 'green',
//   dimensions: {
//     size: {
//       width: 1.999,
//       length: 5.036,
//     },
// min: {
//       width: 1.999,
//       length: 5.036,
//     },
//   },
// };
// треба:
// видалити властивість бренд
// змінити колір на червоний
// -витягнути з min значення length з допомогою деструктуризації, і всі інші ключі за допомгою спред оператора
// -додати до size значення height:77
// -витягнути з size значення length з допомогою деструктуризації і перейменувати на normalLength. Перевірити чи normalLength є парним числом, чи є більшим за 11 і чи ділиться націло на 3(мусите отримати 3 окремі іфки)
// -витягніть список усіх ключів які належать рівню dimensions
// -перевірте чи в авто є властивість 'baby'
// -створіть новий рандомний обєкт і приєднайте його до min.


// Створіть масив, який містить кілька різних назв машин.
// Потім виконайте такі дії:


// Видаліть перший автомобіль з масиву і збережіть його значення. Додайте цей автомобіль в кінець масиву.
// Змініть третій авто на "мерседес".
// Виведіть остаточний масив авто в консоль.
// Using destructuring get first element and rest of fruits
// перевірте чи перший автомобіль отриманий деструктуризацією співпадає з авто під індексом 2
// DemoAslan — 10.02.2024 13:42
// Задачі: 

// Створіть масив чисел і перетворіть його на масив обєктів у форматі: {index,number}
// Візьміть масив чисел і оберніть його задом наперед
// Створіть цикл, який генерує масив з числом 5 помножене на 1-20. Тобто [5,10,15, ... 100]

// Створіть масив чисел і знайдіть те число яке повторюється у даному масиві найчастіше(для цього треба буде створити обєкт, де числа масиву будуть ключами, а значеннями-будуть к-ть повторів. І потім серед значень даного обєкту треба знайти те, яке найчастіше повторюється)

// Знайдіть к-ть ключів, у яких назва менше 5 символів у обєкта

// З допомогою спред оператора обєднайте 3 масиви і 4 обєкта

// маєте 2 масиви. keys=['stas','sasha','oleh','dima'] values=['niger','cygan','garbuz','dementor'].З допомогою цикла треба створити обєкт {stas:'niger',sasha:'cygan',oleh:'garbuz',dima:'dementor'}

// маєте два масива. num1=[1,5,3,8] num2=[2,3,4,5]. Вам потрібно порівняти числа які стоять під однаковим індексом і більше число запхати в новий масив. Маєте на виході отримати [2,5,4,8]
// @Учень  ^
// DemoAslan — 16.02.2024 09:04
// На повторення-декілька банальних задач.

// Створіть масив чисел

// З допомогою простого циклу фор виведіть індекс і значення масиву
// З допомогою фороф виведіть числа масиву

// Створіть обєкт
// Виведіть ключі і значення з допомогою циклу форін


// створіть масив чисел. Виводьте усі числа поки не впретеся в цифру 13. Зупиніть вивід чиел на цьому місці(з допомогою брейк)
// створіть масив чисел. Виводьте усі числа крім тих що діляться націло на 5(з допомогою контінью)

// З допомогою циклу створіть обєкт з 10 ключів, в якому ключ - це стрічка key+${index} а значення -ындекс. Маєте получити щось типу: {key1:1,key2:2, ...}

// створіть обєкт. Поміняйте в ньому ключ і значення місцями

// створіть масив користувачів. видаліть усіх користувачів у кого вік менше 18 або зріст більше 210

// //Виведіть імя користувача з найдовшим масивом. Знайдіть найменшу цифру найдовшого масиву
// const obj = {
//   Dima: [1, 2, 3, 4, 56, 7],
//   Stas: [6677, 87, 89, 9, 0],
//   Oleh: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 5, 6, 7],
//   Sasha: [5, 8, 3],
// };
// DemoAslan — 22.02.2024 22:08
// Add Two Numbers
// Write a function called add that takes two numbers as parameters and returns their sum.

//  Find the Maximum Number
// Write a function called findMax that takes an array of numbers and returns the largest number in the array.

// Check for Palindrome
// Write a function called isPalindrome that checks if a given string is a palindrome (reads the same backward as forward).

// String Repeater
// Write a function named repeatString that takes a string and a number and returns the string repeated that many times.

// Ваша функція має приймати одне натуральне число, після чого вивести:

// "Fizz", якщо це число ділиться на 3;
// "Buzz", якщо це число ділиться на 5;
// “FizzBuzz”, якщо виконані обидві попередні умови;
// саме це число в інших випадках

// EXAMPLE:
// Input: 15
// Output: FizzBuzz

// Input: 10
// Output: Buzz



// Напишіть функцію для побудови горизонтальних стовпчастих діаграм за допомогою символу зірочки.
// Вводити потрібно масив з цілими данними

// EXAMPLE:
// Input: [3,7,1,10,8]

// Вивід: на картинці
// DemoAslan — 05.03.2024 22:45
// Довжина рядка:
// Створіть функцію, яка приймає рядок та повертає його довжину.
// Великі та малі літери:
// Напишіть функцію, яка приймає рядок та повертає новий рядок, де всі літери замінені на великі.
// Розділення рядка:
// Розбийте рядок, який містить ім'я та прізвище, на дві окремі змінні.
// З'єднання рядків:
// Створіть функцію, яка приймає два рядки та повертає їх об'єднання в один.
// Перевірка наявності підрядка:
// Напишіть функцію, яка перевіряє, чи містить рядок певний підрядок.
// Обрізка рядка:
// Створіть функцію, яка обрізає рядок до заданої довжини та додає "..." в кінці.
// Пошук індексу:
// Знайдіть індекс першого входження певного символу у рядку.
// Розділення на масив:
// Розділіть рядок, який містить слова, у масив окремих слів.
// Заміна символів:
// Напишіть функцію, яка замінює всі пробіли у рядку на деякий інший символ.
// Порівняння рядків:
// Порівняйте два рядки і поверніть, чи вони ідентичні.
// Вилучення підрядка:
// Видаліть підрядок із заданого рядка.
// Перетворення у масив символів:
// Перетворіть рядок у масив окремих символів та виведіть його.
// Пошук останнього входження:
// Знайдіть індекс останнього входження символу у рядку.
// Переведення у нижній регістр:
// Створіть функцію, яка перетворює усі літери у рядку у нижній регістр.
// Визначення підрядка:
// Визначте, чи є певний рядок підрядком іншого рядка.



// Напишіть рекурсивну функцію для пошуку індексу певного елемента в масиві.
// Напишіть рекурсивну функцію для обчислення суми всіх елементів масиву.
// DemoAslan — 09.03.2024 19:36
// Лексичне середовище
// У прикладах нижче вам треба описати що поверне та чи інша функція і яким чином це працює


// let name = "Іван";

// function sayHi() {
//   alert("Привіт, " + name);
// }

// name = "Петро";

// sayHi(); // що вона покаже "Іван" чи "Петро"?

// =====================================
// function outerFunction() {
//   let outerVar = "Outer";

//   function innerFunction() {
//     let innerVar = "Inner";
//     console.log(outerVar + " " + innerVar);
//   }

//   innerFunction();
// }

// outerFunction();
// ====================================
// function createCounter() {
//   let count = 0;

//   return function() {
//     return ++count;
//   };
// }

// let counter = createCounter();
// console.log(counter()); 
// console.log(counter()); 
// console.log(counter()); 
// ====================================
// function outer() {
//   let a = 1;

//   function inner() {
//     let b = 2;
//     console.log(a + b);
//   }

//   inner();
//   console.log(a);
// }

// outer();
// ==============================
// function add(x) {
//   return function(y) {
//     return x + y;
//   };
// }

// let addFive = add(5);
// console.log(addFive(3));

// ==========================


// Замикання
// Створіть функцію createCounter, яка повертає об'єкт з методами increment та decrement. При кожному виклику increment збільшує лічильник на 1, а decrement зменшує на 1. Початкове значення лічильника - 0.

// Створіть функцію createSecretHolder, яка приймає початкове значення та повертає об'єкт з двома методами: getSecret та setSecret. Значення, що зберігається в об'єкті, повинно бути приватним і доступним тільки через ці методи.

// Напишіть функцію sequenceGenerator, яка приймає початкове значення та крок і повертає функцію, яка при кожному виклику повертає наступне значення послідовності (починаючи з початкового значення і збільшуючи на крок).Наприклад:
//  const queueMaker=sequenceGenerator(1,4)
// queueMaker() //  => [1,5]
// queueMaker() //  => [1,5,9]
// queueMaker() //  => [1,5,9,13]
// DemoAslan — 12.03.2024 23:09
// Завдання про класи
// Завдання з класами:

// Створити клас "Книга" з властивостями, такими як назва, автор і рік видання.
// Забезпечте клас методом, який дозволить вивести інформацію про книгу в консоль.
// Створити екземпляр класу "Книга" і викликати метод для виведення інформації про цю книгу.

// Завдання з успадкуванням:
// Створити клас "Тварина" з властивостями, такими як назва і звук, а також методом,
// який виводить повідомлення про звук тварини.
// Створити клас "Собака", який успадковує від класу "Тварина" і має додаткову властивість - порода собаки.
// Забезпечте клас "Собака" методом, який виводить повідомлення про звук собаки, додавши в нього породу.
// Створити екземпляр класу "Собака" і викликати метод для виведення повідомлення про звук собаки з породою.

// Завдання з поліморфізмом:
// Створити клас "Фігура" з методом "відображення", який просто виводить повідомлення "Це фігура".
// Створити класи "Прямокутник" і "Коло",які успадковують від класу "Фігура" і мають свої методи "відображення",
// які виводять повідомлення "Це прямокутник" і "Це коло" відповідно.
// Створити масив об'єктів різних фігур (прямокутники, кола) і викликати метод "відображення" для кожного елемента масиву.
// Побачите, як кожна фігура виводить відповідне повідомлення, не залежно від свого типу.


// ______________________________________________________________________________________________________________________________________________________
//                                                                     Додатково
// ______________________________________________________________________________________________________________________________________________________

// - Створити клас який дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car


// -створити класс попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт класу "принц" за допомоги класу який має поля ім'я, вік, туфелька яку він знайшов.
// -- за допоиоги циклу знайти яка попелюшка повинна бути з принцом
// -- Додати принцу функцію "пошук попелюшки"
// -- функція повинна приймати масив попелюшок, та шукає ту котра йому підходить
// Згорнути
// 5_1.txt
// 5 КБ
// DemoAslan — 14.03.2024 22:43
// Тут дві крутяцькі задачі. Вам  сподобається)
// Задача на методи масивів
// // Task : Array Transformation Adventure
// // You are on an adventure with a team of explorers, and you have a backpack represented as an array. Perform the following operations:

// // You've found a treasure! Use the push method to add the treasure chest (represented as an object) to the end of your backpack.
// // Oh no, you've triggered a trap! Use the pop method to remove the last item from your backpack.
// Розгорнути
// message.txt
// 3 КБ
// DemoAslan — 19.03.2024 23:28
// ДЗ на методи масивів ч2
// 1) Дано масив [10, 7, 373, -1, 0, 16, 82, -30, -274, 72, 8, 12, 44, -50, 10, 4, 82, 99]:
//  * відсортувати його від меншого до більшого.
//  * відсортувати його від більшого до меншого.
//  * Відфілтрувати числа які є кратними 3.
//  * Відфілтрувати числа які є більшими за 10.
//  * За допомогою map збільшити кожен елемент в масиві в три рази.
//  * Порахувати загальну суму всіх елментів у масиві (reduce)

// 2) Дано масив ['Hello', 'world', 'how', 'are', 'you', 'lorem', 'ipsum', 'we', 'love', 'java', 'script', 'because', 'we', 'are', 'smart']
//  * Відсортувати його в алфавітному порядку
//  * Відсортувати в зворотньому порядку
//  * Отримати в новому масиві тільки ті слова, довжина яких більша за 4 букви (filter)
//  * Змінити кожне слово в масиві додавши на початок 'Sam says *ваше слово*'

// 3) Все робити тільки за допомогою методів масивів!
// Дано масив :
// const users = [
//    { name: 'Harry', age: 31, isMarried: false },
//    { name: 'Nick', age: 30, isMarried: true },
//    { name: 'Serge', age: 29, isMarried: true },
//    { name: 'John', age: 28, isMarried: false },
//    { name: 'Andrew', age: 30, isMarried: true },
//    { name: 'Anna', age: 31, isMarried: false },
//    { name: 'Viktor', age: 27, isMarried: false },
//    { name: 'Mathew', age: 29, isMarried: true },
//    { name: 'Kevin', age: 30, isMarried: true },
//    { name: 'Lauren', age: 31, isMarried: false },
//    { name: 'Megan', age: 31, isMarried: true },
// ];
// * відсортувати його за  віком (зростання , а потім окремо спадання)
// * відсортувати його за кількістю знаків в імені  (зростання , а потім окремо спадання)
// * пройтись по ньому та додати кожному юзеру поле id - яке характеризує унікальний індентифікатор (По якому принципу його створювати - ваше рішення),
//    та зберегти це в новий масив (первинний масив залишиться без змін)
// * відсортувати його за індентифікатором
// * Всі хто одружений мають попасти у новий масив та отрмати квартиру (reduce)

// * Написати код, який перемішує значення в масиві
// [1,2,3,4,5] -> [4,1,5,2,3]
// [1,2,3,4,5] -> [3,5,1,4,2]
// [4,2,1,5,3] -> [1,5,2,3,4]


// const cars = [
//    { producer:"Subaru",model: "Wrx",year: 2010, color:"blue",type: "sedan",volume: 2,power: 400 },
//    { producer:"Subaru",model: "Legacy",year: 2007, color:"silver",type: "sedan",volume: 3,power: 250 },
//    { producer:"Subaru",model: "Tribeca",year: 2011, color:"white",type: "jeep",volume: 2,power: 300 },
//    { producer:"Subaru",model: "Leone",year: 1998, color:"black",type: "sedan",volume: 2,power: 140 },
//    { producer:"Subaru",model: "Impreza",year: 2014, color:"red",type: "sedan",volume: 2,power: 200 },
//    { producer:"Subaru",model: "Outback",year: 2020, color:"red",type: "hatchback",volume: 2,power: 165 },
//    { producer:"BMW",model: "115",year: 2013, color:"red",type: "hatchback",volume: 1.5,power: 120 },
//    { producer:"BMW",model: "315",year: 2010, color:"white",type: "sedan",volume: 1.5, power: 120 },
//    { producer:"BMW",model: "650",year: 2009, color:"black",type: "coupe",volume: 6,power: 350 },
//    { producer:"BMW",model: "320",year: 2012, color:"red",type: "sedan",volume: 2,power: 180 },
//    { producer:"Mercedes",model: "e200",year: 1990, color:"silver",type: "sedan",volume: 2,power: 180 },
//    { producer:"Mercedes",model: "e63",year 2017, color:"yellow",type: "sedan",volume:3,power: 400 },
//    { producer:"Mercedes",model: "c250",year: 2017, color:"red",type: "sedan",volume: 2.5,power: 230 },
// ];

// Відфільтрувати масив за наступними крітеріями :
// - двигун більше 3х літрів
// - двигун = 2л
// - виробник mercedes
// - двигун більше 3х літрів + виробник mercedes
// - двигун більше 3х літрів + виробник subaru
// - сили більше ніж 300
// - сили більше ніж 300 + виробник subaru
// - двигун меньше 3х літрів + виробник mercedes
// - двигун більше 2л + сили більше 250
// - сили більше 250  + виробник bmw
// - старіші за 20 років


// ______________________________________________________________________________________________________________________________________________________
//                                                                     Додатково
// ______________________________________________________________________________________________________________________________________________________

// Створити обєкт автомобіля з полями:
// Марка автомобля, потужність двигуна, власник, ціна, рік випуску.
// Власник автомобіля теж має бути обєкт, у якого є поля
// Імя, вік, стаж водіння.
// Створити не менше 7 та не більше 20 машинок.
// Для початку вкладіть всі наші створені автомобілі в масив cars.
// Зробили половину автопарку ремонт мотору, що збільшить потужність автомобілів на 10% (переприсвоєння змінної потужності).
// На відремонтовані автомобілі найняти нових водіїв (переприсвоїти змінну водій).
// Далі необхідно рати кожну другу машинку (цикл з кроком в 2), та робити їй підвищення потужності двигуна на 10% та ціну на 5%
// Після того зробити перевірку досвіду ВСІХ наших водіїв. Якщо досвід водія менший за 5 років, але його вік більший за 25,
// то необідно відправити його на курси підвищення кваліфікації, що збільшить йому досвід на 1 рік.
// Також спробуйте порахувати суму, яку потрібно витратити для покупки всіх цих авто в циклі
// Згорнути
// message.txt
// 8 КБ
// І до задачі про інвентар
// Не забудь застосувати вивчені сьогодні методи для попередніх методів класу інвентар

// Фільтрувати товари за назвою(filterItems): Використовує метод filter для фільтрації товарів з назвою більше 6 символів
// Отримати список цін на всі товари (getItemPrices): Використовує метод map для отримання списку цін на всі товари.
// Відсортувати товари за ціною (sortItemsByPrice): Використовує метод sort для сортування товарів за ціною.
// Обчислити загальну вартість всіх товарів (calculateTotalValue): Використовує метод reduce для обчислення загальної вартості всіх товарів у інвентарі."
// DemoAslan — 22.03.2024 09:21
// Комплексна таска на методи масивів і класи
// Це по суті ти маєш зробити скелет інтернет магазину(супер реалістичний випадок)
// ДЗ:
// Create a class Product with the following properties:

// id (a unique identifier for the product)
// name (the name of the product)
// price (the price of the product)
// Розгорнути
// classes-array-objects-homework.txt
// 2 КБ
// DemoAslan — 02.04.2024 22:24
// getTotalSalesByCategory
// getMostValuableCustomer

// закінчити 2 методи маркетплейсу
// DemoAslan — 04.04.2024 21:57
// Створи функцію asyncExecution, яка використовує асинхронність JavaScript для виведення на екран чисел від 1 до 5 з інтервалом в 1 секунду між виведеннями.

// Створи функцію generatePromise, яка повертає Promise, який вирішується через 2 секунди та повертає об'єкт зі словом "Success".


// Створи функцію errorHandling, яка повертає Promise та вирішується з помилкою через 1 секунду. Обробіть цю помилку та виведіть повідомлення.

// Створи ланцюг Promise, який виконує три послідовні асинхронні операції. Кожна наступна операція повинна використовувати результат попередньої.

// Створи послідовність асинхронних операцій, що демонструє ситуацію "Promise Hell", коли вкладені проміси та зворотні виклики ускладнюють код. Потім виправте це використовуючи async/await для полегшення читання та розуміння коду.
// DemoAslan — 09.04.2024 22:26
// Реалізувати CRUD для постыв використовуючи jsonplaceholder
// DemoAslan — 11.04.2024 22:01
// write code to get data from https://jsonplaceholder.typicode.com/users (receive statusCode and data)

// write code to get data from https://jsonplaceholder.typicode.com/users then get id of first user and using this id get posts of this user using
// https://jsonplaceholder.typicode.com/posts?userId={id of ur user}
// ﻿
// 1) Дано масив [10, 7, 373, -1, 0, 16, 82, -30, -274, 72, 8, 12, 44, -50, 10, 4, 82, 99]:
//  * відсортувати його від меншого до більшого.
//  * відсортувати його від більшого до меншого.
//  * Відфілтрувати числа які є кратними 3.
//  * Відфілтрувати числа які є більшими за 10.
//  * За допомогою map збільшити кожен елемент в масиві в три рази.
//  * Порахувати загальну суму всіх елментів у масиві (reduce)

// 2) Дано масив ['Hello', 'world', 'how', 'are', 'you', 'lorem', 'ipsum', 'we', 'love', 'java', 'script', 'because', 'we', 'are', 'smart']
//  * Відсортувати його в алфавітному порядку
//  * Відсортувати в зворотньому порядку
//  * Отримати в новому масиві тільки ті слова, довжина яких більша за 4 букви (filter)
//  * Змінити кожне слово в масиві додавши на початок 'Sam says *ваше слово*'

// 3) Все робити тільки за допомогою методів масивів!
// Дано масив :
// const users = [
//    { name: 'Harry', age: 31, isMarried: false },
//    { name: 'Nick', age: 30, isMarried: true },
//    { name: 'Serge', age: 29, isMarried: true },
//    { name: 'John', age: 28, isMarried: false },
//    { name: 'Andrew', age: 30, isMarried: true },
//    { name: 'Anna', age: 31, isMarried: false },
//    { name: 'Viktor', age: 27, isMarried: false },
//    { name: 'Mathew', age: 29, isMarried: true },
//    { name: 'Kevin', age: 30, isMarried: true },
//    { name: 'Lauren', age: 31, isMarried: false },
//    { name: 'Megan', age: 31, isMarried: true },
// ];
// * відсортувати його за  віком (зростання , а потім окремо спадання)
// * відсортувати його за кількістю знаків в імені  (зростання , а потім окремо спадання)
// * пройтись по ньому та додати кожному юзеру поле id - яке характеризує унікальний індентифікатор (По якому принципу його створювати - ваше рішення),
//    та зберегти це в новий масив (первинний масив залишиться без змін)
// * відсортувати його за індентифікатором
// * Всі хто одружений мають попасти у новий масив та отрмати квартиру (reduce)

// * Написати код, який перемішує значення в масиві
// [1,2,3,4,5] -> [4,1,5,2,3]
// [1,2,3,4,5] -> [3,5,1,4,2]
// [4,2,1,5,3] -> [1,5,2,3,4]


// const cars = [
//    { producer:"Subaru",model: "Wrx",year: 2010, color:"blue",type: "sedan",volume: 2,power: 400 },
//    { producer:"Subaru",model: "Legacy",year: 2007, color:"silver",type: "sedan",volume: 3,power: 250 },
//    { producer:"Subaru",model: "Tribeca",year: 2011, color:"white",type: "jeep",volume: 2,power: 300 },
//    { producer:"Subaru",model: "Leone",year: 1998, color:"black",type: "sedan",volume: 2,power: 140 },
//    { producer:"Subaru",model: "Impreza",year: 2014, color:"red",type: "sedan",volume: 2,power: 200 },
//    { producer:"Subaru",model: "Outback",year: 2020, color:"red",type: "hatchback",volume: 2,power: 165 },
//    { producer:"BMW",model: "115",year: 2013, color:"red",type: "hatchback",volume: 1.5,power: 120 },
//    { producer:"BMW",model: "315",year: 2010, color:"white",type: "sedan",volume: 1.5, power: 120 },
//    { producer:"BMW",model: "650",year: 2009, color:"black",type: "coupe",volume: 6,power: 350 },
//    { producer:"BMW",model: "320",year: 2012, color:"red",type: "sedan",volume: 2,power: 180 },
//    { producer:"Mercedes",model: "e200",year: 1990, color:"silver",type: "sedan",volume: 2,power: 180 },
//    { producer:"Mercedes",model: "e63",year 2017, color:"yellow",type: "sedan",volume:3,power: 400 },
//    { producer:"Mercedes",model: "c250",year: 2017, color:"red",type: "sedan",volume: 2.5,power: 230 },
// ];

// Відфільтрувати масив за наступними крітеріями :
// - двигун більше 3х літрів
// - двигун = 2л
// - виробник mercedes
// - двигун більше 3х літрів + виробник mercedes
// - двигун більше 3х літрів + виробник subaru
// - сили більше ніж 300
// - сили більше ніж 300 + виробник subaru
// - двигун меньше 3х літрів + виробник mercedes
// - двигун більше 2л + сили більше 250
// - сили більше 250  + виробник bmw
// - старіші за 20 років


// ______________________________________________________________________________________________________________________________________________________
//                                                                     Додатково
// ______________________________________________________________________________________________________________________________________________________

// Створити обєкт автомобіля з полями:
// Марка автомобля, потужність двигуна, власник, ціна, рік випуску.
// Власник автомобіля теж має бути обєкт, у якого є поля
// Імя, вік, стаж водіння.
// Створити не менше 7 та не більше 20 машинок.
// Для початку вкладіть всі наші створені автомобілі в масив cars.
// Зробили половину автопарку ремонт мотору, що збільшить потужність автомобілів на 10% (переприсвоєння змінної потужності).
// На відремонтовані автомобілі найняти нових водіїв (переприсвоїти змінну водій).
// Далі необхідно рати кожну другу машинку (цикл з кроком в 2), та робити їй підвищення потужності двигуна на 10% та ціну на 5%
// Після того зробити перевірку досвіду ВСІХ наших водіїв. Якщо досвід водія менший за 5 років, але його вік більший за 25,
// то необідно відправити його на курси підвищення кваліфікації, що збільшить йому досвід на 1 рік.
// Також спробуйте порахувати суму, яку потрібно витратити для покупки всіх цих авто в циклі
// message.txt
// 8 КБ